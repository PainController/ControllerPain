//
//  CDUserViewController.swift
//  ControlaDor
//
//  Created by Isaías Lima on 08/03/16.
//  Copyright (c) 2016 PainController. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import ResearchKit
import MessageUI

protocol CDUserViewControllerInput
{
    func displayDataSource(viewModel: CDUserViewModel)
}

protocol CDUserViewControllerOutput
{
    func requestHealthAndData(request: CDUserRequest)
}

class CDUserViewController: UITableViewController, CDUserViewControllerInput, ORKTaskViewControllerDelegate
{
    var output: CDUserViewControllerOutput!
    var router: CDUserRouter!
  
    // MARK: Object lifecycle
  
    override func awakeFromNib()
    {
        super.awakeFromNib()
        CDUserConfigurator.sharedInstance.configure(self)
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadHealthDataAndDataSource()
        headerView.frame.size.height = 400
    }
  
    // MARK: Event handling
  
    func loadHealthDataAndDataSource()
    {
        // NOTE: Ask the Interactor to do some work
    
        let request = CDUserRequest()
        output.requestHealthAndData(request)
    }
  
    // MARK: Display logic
  
    func displayDataSource(viewModel: CDUserViewModel)
    {
        // NOTE: Display the result from the Presenter
    
        for (_,element) in viewModel.userHealthData.enumerate() {
            userData.append((element.0,element.1))
        }
        buttonData = viewModel.buttonStrings
        briefPainTask = viewModel.briefPainTask
    }

    // MARK: TableView population methods

    var userData: [(NSObject , String)]! = [(NSObject , String)]()
    var buttonData: [String]!
    var briefPainTask: ORKOrderedTask!
    @IBOutlet weak var headerView: UIView!

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 2
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        switch section {
        case 0:
            return userData.count
        case 1:
            return buttonData.count
        default:
            return 1
        }
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCellWithIdentifier("userData", forIndexPath: indexPath)
            let datum = userData[indexPath.row]
            cell.textLabel?.text = datum.0 as? String
            cell.detailTextLabel?.text = datum.1
            return cell
        case 1:
            let cell = tableView.dequeueReusableCellWithIdentifier("button", forIndexPath: indexPath)
            if indexPath.row == 0 {
                cell.textLabel?.text = "Inventário breve de dor"
            } else {
                cell.textLabel?.text = "Marcar consulta"
            }
            return cell
        default:
            return UITableViewCell()
        }
    }

    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if indexPath.section == 1 && indexPath.row == 0 {
            let taskViewController = IRLTaskViewController(task: BriefPainInvetoryTask, taskRunUUID: nil)
            taskViewController.delegate = self
            taskViewController.outputDirectory = NSURL(fileURLWithPath: NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0], isDirectory: true)
            presentViewController(taskViewController, animated: true, completion: nil)
        } else if indexPath.section == 1 && indexPath.row == 1 {
            let defaults = NSUserDefaults.standardUserDefaults()
            if let data = defaults.objectForKey("BFIUpdated") {
                let doctorData = data as! NSData
                let dataPack = NSKeyedUnarchiver.unarchiveObjectWithData(doctorData) as! NSArray
                let results = dataPack.firstObject as! [String : String]
                _ = dataPack.lastObject as! [UIImage]

                do {
                    let jsonData = try NSJSONSerialization.dataWithJSONObject(results, options: .PrettyPrinted)
                    let jsonText = NSString(data: jsonData, encoding: NSASCIIStringEncoding)
                    print(jsonText)
                } catch {
                    print(error)
                }
            }
        }
    }

    // MARK: ORKTaskViewControllerDelegate

    func taskViewController(taskViewController: ORKTaskViewController, didFinishWithReason reason: ORKTaskViewControllerFinishReason, error: NSError?) {

        if reason == .Completed {
            let taskResult = taskViewController.result
            let results = taskViewController.dictionaryWithTaskResult(taskResult)
            let images = [(taskViewController as! IRLTaskViewController).shaderFrontImage , (taskViewController as! IRLTaskViewController).shaderBackImage]
            let doctorData = [results , images]
            let data = NSKeyedArchiver.archivedDataWithRootObject(doctorData)
            let userDefaults = NSUserDefaults.standardUserDefaults()
            userDefaults.setObject(data, forKey: "BFIUpdated")
            userDefaults.synchronize()
            print(userDefaults.objectForKey("BFIUpdated"))
        }

        // Aguardando método de upload para o server

        taskViewController.dismissViewControllerAnimated(true, completion: nil)
    }

    func taskViewController(taskViewController: ORKTaskViewController, viewControllerForStep step: ORKStep) -> ORKStepViewController? {

        var controller = ViewController.instantiateViewControllerFromStoryboard(UIStoryboard(name: "Main", bundle: nil))
        controller?.step = step
        controller?.continueButtonTitle = "Next"

        if step.identifier == "HumanBodyFront" {
            controller?.delegate = taskViewController
            controller?.bodyTypeSet(.Front)
            return controller
        } else if step.identifier == "HumanBodyBack" {
            controller?.delegate = taskViewController
            controller?.bodyTypeSet(.Back)
            return controller
        }

        controller = nil
        return nil
    }

}
