//
//  CDUserViewController.swift
//  ControlaDor
//
//  Created by Isaías Lima on 08/03/16.
//  Copyright (c) 2016 PainController. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import ResearchKit
import MessageUI
import WatchConnectivity

protocol CDUserViewControllerInput
{
    func displayDataSource(viewModel: CDUserViewModel)
}

protocol CDUserViewControllerOutput
{
    func requestHealthAndData(request: CDUserRequest)
}

class CDUserViewController: UITableViewController, CDUserViewControllerInput, ORKTaskViewControllerDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, WCSessionDelegate
{
    var output: CDUserViewControllerOutput!
    var router: CDUserRouter!
  
    // MARK: Object lifecycle
  
    override func awakeFromNib()
    {
        super.awakeFromNib()
        CDUserConfigurator.sharedInstance.configure(self)
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadHealthDataAndDataSource()
        headerView.frame.size.height = 400
        photoView.layer.masksToBounds = false
        photoView.layer.cornerRadius = photoView.frame.size.width/2
        if let imageData = NSUserDefaults.standardUserDefaults().objectForKey("UserImage") as? NSData {
            photoView.image = UIImage(data: imageData)
        }

        let userDefaults = NSUserDefaults.standardUserDefaults()
        let firstOpen = userDefaults.boolForKey("FirstOpen")

        if !firstOpen {
            let tutorial = UIStoryboard(name: "Main", bundle: nil).instantiateViewControllerWithIdentifier("Root")
            presentViewController(tutorial, animated: true, completion: nil)
            userDefaults.setBool(true, forKey: "FirstOpen")
            userDefaults.synchronize()
        }

        if #available(iOS 9.0, *) {
            if WCSession.isSupported() {
                let session = WCSession.defaultSession()
                session.delegate = self
                session.activateSession()
            } else {
            }

        } else {
            // Fallback on earlier versions
        }
    }

    func createUserContact(date: NSDate) -> CDUserContact {
        var contact = CDUserContact()

        let userDefaults = NSUserDefaults.standardUserDefaults()
        let userData = userDefaults.objectForKey("Contact") as? [String : String]

        let name = userData!["Nome"]
        let convenium = userData!["Convênio"]
        let phone = userData!["Telefone"]
        let mail = userData!["E-mail"]

        contact.name = name
        contact.convenio = convenium
        contact.telephone = phone
        contact.email = mail
        contact.date = date
        return contact
    }

    @available(iOS 9.0, *)
    func session(session: WCSession, didReceiveMessage message: [String : AnyObject]) {
        guard let msg = message["ConsultDate"] as? String else {
            print(#function,"Nil variable")
            return
        }

        dispatch_async(dispatch_get_main_queue()) {
            self.view.backgroundColor = .blackColor()
            print(#function, msg)
            let defaults = NSUserDefaults.standardUserDefaults()
            if let data = defaults.objectForKey("BFIUpdated") {
                let doctorData = data as! NSData
                let dataPack = NSKeyedUnarchiver.unarchiveObjectWithData(doctorData) as! NSArray
                let results = dataPack.firstObject as! [String : String]
                let images = dataPack.lastObject as! [UIImage]
                let dateFormatter = NSDateFormatter()
                dateFormatter.dateFormat = "dd/MM/yyyy"
                do {
                    let jsonData = try NSJSONSerialization.dataWithJSONObject(results, options: .PrettyPrinted)
                    let jsonText = NSString(data: jsonData, encoding: NSASCIIStringEncoding)
                    let imagesData = NSKeyedArchiver.archivedDataWithRootObject(images)
                    self.userConsult = CDUserConsult(briefPainInventoryData: String(jsonText!), imagesData: imagesData)
                    let contact = self.createUserContact(dateFormatter.dateFromString(msg)!)

                    CDCloudKitStack.createBPIRecord(self.userConsult.briefPainInventoryData, images: self.userConsult.imagesData, contact: contact, indicator: UIActivityIndicatorView(), completionHandler: { (success) in
                        if !success {
                            self.view.backgroundColor = .blackColor()
                        }
                    })
                } catch {
                    print(error)
                }
            }
        }
    }

    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        loadHealthDataAndDataSource()
    }
  
    // MARK: Event handling
  
    func loadHealthDataAndDataSource()
    {
        // NOTE: Ask the Interactor to do some work
    
        let request = CDUserRequest()
        output.requestHealthAndData(request)
    }
  
    // MARK: Display logic
  
    func displayDataSource(viewModel: CDUserViewModel)
    {
        // NOTE: Display the result from the Presenter

        userData = []
        for (_,element) in viewModel.userHealthData.enumerate() {
            userData.append((element.0,element.1))
        }
        buttonData = viewModel.buttonStrings
        briefPainTask = viewModel.briefPainTask
        tableView.reloadData()
    }

    // MARK: TableView population methods

    var userData: [(NSObject , String)]! = [(NSObject , String)]()
    var buttonData: [String]!
    var briefPainTask: ORKOrderedTask!
    var userConsult: CDUserConsult!
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var photoView: UIImageView!

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 2
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        switch section {
        case 0:
            return userData.count
        case 1:
            return buttonData.count
        default:
            return 1
        }
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCellWithIdentifier("userData", forIndexPath: indexPath)
            var datum = userData[indexPath.row]
            cell.textLabel?.text = datum.0 as? String
            if datum.0 == "E-mail" {
                let components = datum.1.componentsSeparatedByString("@")
                datum.1 = components.first! + "@\n" + components.last!
            }
            cell.detailTextLabel?.text = datum.1
            return cell
        case 1:
            let cell = tableView.dequeueReusableCellWithIdentifier("button", forIndexPath: indexPath)
            if indexPath.row == 0 {
                cell.textLabel?.text = "Inventário breve de dor"
            } else {
                cell.textLabel?.text = "Marcar consulta"
            }
            return cell
        default:
            return UITableViewCell()
        }
    }

    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if indexPath.section == 1 && indexPath.row == 0 {
            let taskViewController = IRLTaskViewController(task: BriefPainInvetoryTask, taskRunUUID: nil)
            taskViewController.delegate = self
            taskViewController.outputDirectory = NSURL(fileURLWithPath: NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0], isDirectory: true)
            presentViewController(taskViewController, animated: true, completion: nil)
        } else if indexPath.section == 1 && indexPath.row == 1 {
            let defaults = NSUserDefaults.standardUserDefaults()
            if let data = defaults.objectForKey("BFIUpdated") {
                let doctorData = data as! NSData
                let dataPack = NSKeyedUnarchiver.unarchiveObjectWithData(doctorData) as! NSArray
                let results = dataPack.firstObject as! [String : String]
                let images = dataPack.lastObject as! [UIImage]

                do {
                    let jsonData = try NSJSONSerialization.dataWithJSONObject(results, options: .PrettyPrinted)
                    let jsonText = NSString(data: jsonData, encoding: NSASCIIStringEncoding)
                    let imagesData = NSKeyedArchiver.archivedDataWithRootObject(images)
                    userConsult = CDUserConsult(briefPainInventoryData: String(jsonText!), imagesData: imagesData)
                    router.navigateToSomewhere()
                } catch {
                    print(error)
                }
            } else {
                let actionController = UIAlertController(title: "Você ainda não realizou o Inventário Breve de Dor", message: "Realize para poder marcar uma consulta", preferredStyle: .Alert)
                let action = UIAlertAction(title: "Ok", style: .Default, handler: { (alert) -> Void in
                    self.navigationController?.popToRootViewControllerAnimated(true)
                })
                actionController.addAction(action)
                self.presentViewController(actionController, animated: true, completion: nil)
            }
        }
    }

    @IBAction func infoApp(sender: AnyObject) {
        let tutorial = UIStoryboard(name: "Main", bundle: nil).instantiateViewControllerWithIdentifier("Root")
        presentViewController(tutorial, animated: true, completion: nil)
    }

    @IBAction func dataEdit(sender: AnyObject) {
        let tutorialController = UIStoryboard(name: "Main", bundle: nil).instantiateViewControllerWithIdentifier("Tutorial")
        navigationController?.pushViewController(tutorialController, animated: true)
    }

    @IBAction func takePicture(sender: AnyObject) {
        let imagePicker = UIImagePickerController()
        imagePicker.allowsEditing = true
        imagePicker.delegate = self

        let alertController = UIAlertController(title: "Deseja tirar a foto ou escolher da biblioteca?", message: nil, preferredStyle: .ActionSheet)
        let camera = UIAlertAction(title: "Câmera", style: .Default) { (action) -> Void in
            imagePicker.sourceType = .Camera
            imagePicker.cameraDevice = .Front
            self.presentViewController(imagePicker, animated: true, completion: nil)
        }
        let library = UIAlertAction(title: "Biblioteca de fotos", style: .Default) { (action) -> Void in
            imagePicker.sourceType = .SavedPhotosAlbum
            self.presentViewController(imagePicker, animated: true, completion: nil)
        }
        let cancel = UIAlertAction(title: "Cancelar", style: .Cancel, handler: nil)
        alertController.addAction(camera)
        alertController.addAction(library)
        alertController.addAction(cancel)

        presentViewController(alertController, animated: true, completion: nil)
    }

    // MARK: UIImagePickerControllerDelegate

    func imagePickerController(picker: UIImagePickerController, didFinishPickingImage image: UIImage, editingInfo: [String : AnyObject]?) {
        let userDefaults = NSUserDefaults.standardUserDefaults()
        let encodedImage = UIImageJPEGRepresentation(image, 1)
        userDefaults.setObject(encodedImage, forKey: "UserImage")
        photoView.image = image
        picker.dismissViewControllerAnimated(true, completion: nil)
    }

    // MARK: ORKTaskViewControllerDelegate

    func taskViewController(taskViewController: ORKTaskViewController, didFinishWithReason reason: ORKTaskViewControllerFinishReason, error: NSError?) {

        if reason == .Completed {
            let taskResult = taskViewController.result
            let results = taskViewController.dictionaryWithTaskResult(taskResult)
            let images = [(taskViewController as! IRLTaskViewController).shaderFrontImage , (taskViewController as! IRLTaskViewController).shaderBackImage]
            let doctorData = [results , images]
            let data = NSKeyedArchiver.archivedDataWithRootObject(doctorData)
            let userDefaults = NSUserDefaults.standardUserDefaults()
            userDefaults.setObject(data, forKey: "BFIUpdated")
            userDefaults.synchronize()
            print(userDefaults.objectForKey("BFIUpdated"))
        }

        taskViewController.dismissViewControllerAnimated(true, completion: nil)
    }

    func taskViewController(taskViewController: ORKTaskViewController, viewControllerForStep step: ORKStep) -> ORKStepViewController? {

        var controller = ViewController.instantiateViewControllerFromStoryboard(UIStoryboard(name: "Main", bundle: nil))
        controller?.step = step
        controller?.continueButtonTitle = "Next"

        if step.identifier == "HumanBodyFront" {
            controller?.delegate = taskViewController
            controller?.bodyTypeSet(.Front)
            return controller
        } else if step.identifier == "HumanBodyBack" {
            controller?.delegate = taskViewController
            controller?.bodyTypeSet(.Back)
            return controller
        }

        controller = nil
        return nil
    }

}
