//
//  CDDoctorInteractor.swift
//  ControlaDor
//
//  Created by IsaÃ­as Lima on 15/03/16.
//  Copyright (c) 2016 PainController. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CDDoctorInteractorInput
{
  func makeFecthRequest(request: CDDoctorRequest)
  func deleteConsult(request: CDConsultDeleteRequest, completionHandler: (success: Bool) -> Void)
}

protocol CDDoctorInteractorOutput
{
  func presentEntities(response: CDDoctorResponse)
  func reloadTableView()
}

class CDDoctorInteractor: CDDoctorInteractorInput
{
  var output: CDDoctorInteractorOutput!
  var worker: CDPersistentStoreWorker!
  var persistentWorker: CDDoctorWorker!
  var lastUpdatedEntries: [CDConsultData]!
    
  // MARK: Business logic
  
  func makeFecthRequest(request: CDDoctorRequest)
  {
    // NOTE: Create some Worker to do the work
    
    worker = CDPersistentStoreWorker(entityName: "CDConsultData")
    do {
        try worker.makeFetchRequest({ (entities) -> Void in
            self.lastUpdatedEntries = entities as! [CDConsultData]
            let response = CDDoctorResponse(entities: entities as! [CDConsultData])
            self.output.presentEntities(response)
        })
    } catch {
        print(error)

        // tratar
    }
  }

    func deleteConsult(request: CDConsultDeleteRequest, completionHandler: (success: Bool) -> Void) {
        persistentWorker = CDDoctorWorker()
        let entityData = request.entityData
        for entity in lastUpdatedEntries {
            let contactHash = NSKeyedUnarchiver.unarchiveObjectWithData(entity.contact!) as! [String : AnyObject]
            let contact = CDUserContact(name: contactHash["Name"] as? String, convenio: contactHash["Convenio"] as! String, telephone: contactHash["Telephone"] as! String, email: contactHash["Email"] as! String, date: contactHash["Date"] as! NSDate)
            if contact.name == entityData.contact.name && contact.convenio == entityData.contact.convenio && contact.telephone == entityData.contact.telephone && contact.email == entityData.contact.email && contact.date == entityData.contact.date {
                persistentWorker.deleteConsult(entity, completionHandler: { (success) -> Void in
                    if success {
                        completionHandler(success: true)
                        self.output.reloadTableView()
                    } else {
                        // tratar
                        completionHandler(success: true)
                    }
                })
            }
        }
        
    }
}
